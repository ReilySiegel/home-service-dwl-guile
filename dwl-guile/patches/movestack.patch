diff --git a/dscm/bindings.h b/dscm/bindings.h
index d3567c6..4b1c9d8 100644
--- a/dscm/bindings.h
+++ b/dscm/bindings.h
@@ -344,6 +344,14 @@ dscm_binding_reloadconfig()
 	return SCM_BOOL_T;
 }
 
+static inline SCM
+dscm_binding_movestack(SCM direction)
+{
+	Arg a = {.i = scm_to_int(direction)};
+	movestack(&a);
+	return SCM_BOOL_T;
+}
+
 static inline void
 dscm_register()
 {
@@ -433,6 +441,7 @@ dscm_register()
 	scm_c_define_gsubr("dwl:change-gaps", 1, 0, 0, &dscm_binding_incrgaps);
 	scm_c_define_gsubr("dwl:change-gaps-inner", 1, 0, 0, &dscm_binding_incrigaps);
 	scm_c_define_gsubr("dwl:change-gaps-outer", 1, 0, 0, &dscm_binding_incrogaps);
+	scm_c_define_gsubr("dwl:move-stack", 1, 0, 0, &dscm_binding_movestack);
 
 	/* dwl-guile specific bindings */
 	scm_c_define_gsubr("dwl:reload-config", 0, 0, 0, &dscm_binding_reloadconfig);
diff --git a/dwl.c b/dwl.c
index 271b003..12ab7eb 100644
--- a/dwl.c
+++ b/dwl.c
@@ -327,6 +327,7 @@ static void maplayersurfacenotify(struct wl_listener *listener, void *data);
 static void mapnotify(struct wl_listener *listener, void *data);
 static void maximizenotify(struct wl_listener *listener, void *data);
 static void monocle(Monitor *m);
+static void movestack(const Arg *arg);
 static void motionabsolute(struct wl_listener *listener, void *data);
 static void motionnotify(uint32_t time);
 static void motionrelative(struct wl_listener *listener, void *data);
@@ -1742,6 +1743,33 @@ monocle(Monitor *m)
 		wlr_scene_node_raise_to_top(&c->scene->node);
 }
 
+void
+movestack(const Arg *arg)
+{
+	Client *c, *sel = focustop(selmon);
+
+	if (wl_list_length(&clients) <= 1)
+		return;
+
+	if (arg->i > 0) {
+		wl_list_for_each(c, &sel->link, link) {
+			if (VISIBLEON(c, selmon) || &c->link == &clients)
+				break; /* found it */
+		}
+	} else {
+		wl_list_for_each_reverse(c, &sel->link, link) {
+			if (VISIBLEON(c, selmon) || &c->link == &clients)
+				break; /* found it */
+		}
+		/* backup one client */
+		c = wl_container_of(c->link.prev, c, link);
+	}
+
+	wl_list_remove(&sel->link);
+	wl_list_insert(&c->link, &sel->link);
+	arrange(selmon);
+}
+
 void
 motionabsolute(struct wl_listener *listener, void *data)
 {
