diff --git a/dwl.c b/dwl.c
index 0ef7a35..dcb6ee6 100644
--- a/dwl.c
+++ b/dwl.c
@@ -316,7 +316,7 @@ static void render(struct wlr_surface *surface, int sx, int sy, void *data);
 static void renderclients(Monitor *m, struct timespec *now);
 static void renderlayer(struct wl_list *layer_surfaces, struct timespec *now);
 static void rendermon(struct wl_listener *listener, void *data);
-static void resize(Client *c, int x, int y, int w, int h, int interact);
+static void resize(Client *c, int x, int y, int w, int h, int interact, int draw_borders);
 static void run(char *startup_cmd);
 static void scalebox(struct wlr_box *box, float scale);
 static Client *selclient(void);
@@ -446,6 +446,7 @@ static Atom netatom[NetLast];
 #include "dscm-utils.h"
 #include "dscm-config.h"
 #include "dscm-bindings.h"
+#include "patch-smartborders.h"
 
 /* function implementations */
 void
@@ -824,7 +825,7 @@ closemon(Monitor *m)
 	wl_list_for_each(c, &clients, link) {
 		if (c->isfloating && c->geom.x > m->m.width)
 			resize(c, c->geom.x - m->w.width, c->geom.y,
-				c->geom.width, c->geom.height, 0);
+				c->geom.width, c->geom.height, 0, 1);
 		if (c->mon == m)
 			setmon(c, selmon, c->tags);
 	}
@@ -969,7 +970,7 @@ createmon(struct wl_listener *listener, void *data)
 		wl_list_for_each(c, &clients, link) {
 			if (c->isfloating)
 				resize(c, c->geom.x + m->w.width, c->geom.y,
-						c->geom.width, c->geom.height, 0);
+						c->geom.width, c->geom.height, 0, 1);
 		}
 		return;
 	}
@@ -1166,14 +1167,15 @@ setfullscreen(Client *c, int fullscreen)
 		c->prevy = c->geom.y;
 		c->prevheight = c->geom.height;
 		c->prevwidth = c->geom.width;
-		resize(c, c->mon->m.x, c->mon->m.y, c->mon->m.width, c->mon->m.height, 0);
+
+		resize(c, c->mon->m.x, c->mon->m.y, c->mon->m.width, c->mon->m.height, 0, !smartborders);
 		wl_list_remove(&c->slink);
 		wl_list_insert(&stack, &c->slink);
 		motionnotify(0);
 	} else {
 		/* restore previous size instead of arrange for floating windows since
 		 * client positions are set by the user and cannot be recalculated */
-		resize(c, c->prevx, c->prevy, c->prevwidth, c->prevheight, 0);
+		resize(c, c->prevx, c->prevy, c->prevwidth, c->prevheight, 0, 1);
 		if (!c->isfloating) {
 			wl_list_remove(&c->slink);
 			wl_list_insert(stack.prev, &c->slink);
@@ -1477,7 +1479,10 @@ monocle(Monitor *m)
 	wl_list_for_each(c, &clients, link) {
 		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
 			continue;
-		resize(c, m->w.x, m->w.y, m->w.width, m->w.height, 0);
+		if (c->isfullscreen)
+			setfullscreen(c, 1);
+		else
+			resize(c, m->w.x, m->w.y, m->w.width, m->w.height, 0, !smartborders);
 	}
 
         /* Lift selected client */
@@ -1522,12 +1527,12 @@ motionnotify(uint32_t time)
 	if (cursor_mode == CurMove) {
 		/* Move the grabbed client to the new position. */
 		resize(grabc, cursor->x - grabcx, cursor->y - grabcy,
-				grabc->geom.width, grabc->geom.height, 1);
+				grabc->geom.width, grabc->geom.height, 1, 1);
 		return;
 	} else if (cursor_mode == CurResize) {
 		resize(grabc, grabc->geom.x, grabc->geom.y,
 				cursor->x - grabc->geom.x,
-				cursor->y - grabc->geom.y, 1);
+				cursor->y - grabc->geom.y, 1, 1);
 		return;
 	}
 
@@ -1961,7 +1966,7 @@ rendermon(struct wl_listener *listener, void *data)
 }
 
 void
-resize(Client *c, int x, int y, int w, int h, int interact)
+resize(Client *c, int x, int y, int w, int h, int interact, int draw_borders)
 {
 	/*
 	 * Note that I took some shortcuts here. In a more fleshed-out
@@ -1973,6 +1978,7 @@ resize(Client *c, int x, int y, int w, int h, int interact)
 	c->geom.y = y;
 	c->geom.width = w;
 	c->geom.height = h;
+	c->bw = (1 - !draw_borders) * borderpx;
 	applybounds(c, bbox);
 	/* wlroots makes this a no-op if size hasn't changed */
 	c->resize = client_set_size(c, c->geom.width - 2 * c->bw,
@@ -2104,6 +2110,15 @@ setlayout(const Arg *arg)
 		selmon->sellt ^= 1;
 	if (arg && arg->v)
 		selmon->lt[selmon->sellt] = (Layout *)arg->v;
+	if (!selmon->lt[selmon->sellt]->arrange) {
+		/* floating layout, draw borders around all clients */
+		Client *c;
+		wl_list_for_each(c, &clients, link) {
+			if (c->bw)
+				continue;
+			resize(c, c->geom.x, c->geom.y, c->geom.width, c->geom.height, 0, 1);
+		}
+	}
 	/* TODO change layout symbol? */
 	arrange(selmon);
 	printstatus();
@@ -2182,7 +2197,8 @@ reloadconfig(int signal, void *data) {
         wl_list_for_each(c, &clients, link) {
                 if (c->bw > 0)
                         c->bw = borderpx;
-                resize(c, c->geom.x, c->geom.y, c->geom.width, c->geom.height, 0);
+                /* TODO: This will also apply borders to clients that did not previously have borders */
+                resize(c, c->geom.x, c->geom.y, c->geom.width, c->geom.height, 0, 1);
         }
 
         /* Rearrange clients on all monitors */
@@ -2413,7 +2429,7 @@ tagmon(const Arg *arg)
 void
 tile(Monitor *m)
 {
-	unsigned int i, n = 0, h, mw, my, ty;
+	unsigned int i, n = 0, h, mw, my, ty, draw_borders = 1;
 	Client *c;
 
 	wl_list_for_each(c, &clients, link)
@@ -2422,6 +2438,9 @@ tile(Monitor *m)
 	if (n == 0)
 		return;
 
+	if (n == smartborders)
+		draw_borders = 0;
+
 	if (n > m->nmaster)
 		mw = m->nmaster ? m->w.width * m->mfact : 0;
 	else
@@ -2432,11 +2451,11 @@ tile(Monitor *m)
 			continue;
 		if (i < m->nmaster) {
 			h = (m->w.height - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->w.x, m->w.y + my, mw, h, 0);
+			resize(c, m->w.x, m->w.y + my, mw, h, 0, draw_borders);
 			my += c->geom.height;
 		} else {
 			h = (m->w.height - ty) / (n - i);
-			resize(c, m->w.x + mw, m->w.y + ty, m->w.width - mw, h, 0);
+			resize(c, m->w.x + mw, m->w.y + ty, m->w.width - mw, h, 0, draw_borders);
 			ty += c->geom.height;
 		}
 		i++;
@@ -3109,6 +3128,7 @@ main(int argc, char *argv[])
         scm_init_guile();
         dscm_register();
         dscm_config_parse(config_file);
+        patch_smartborders_config_parse();
 	setup(config_file);
 	run(startup_cmd);
         dscm_config_cleanup();
diff --git a/patch-smartborders.h b/patch-smartborders.h
new file mode 100644
index 0000000..c803d1f
--- /dev/null
+++ b/patch-smartborders.h
@@ -0,0 +1,7 @@
+static int smartborders = 0;
+
+static inline void
+patch_smartborders_config_parse()
+{
+        smartborders = dscm_alist_get_int(config, "smart-borders");
+}
