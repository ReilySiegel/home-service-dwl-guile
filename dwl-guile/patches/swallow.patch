diff --git a/dwl.c b/dwl.c
index a541826..e9d6204 100644
--- a/dwl.c
+++ b/dwl.c
@@ -96,7 +96,8 @@ typedef struct {
 } Button;
 
 typedef struct Monitor Monitor;
-typedef struct {
+typedef struct Client Client;
+struct Client {
 	/* Must keep these three elements in this order */
 	unsigned int type; /* XDGShell or X11* */
 	struct wlr_box geom;  /* layout-relative, includes border */
@@ -125,7 +126,7 @@ typedef struct {
 #endif
 	unsigned int bw;
 	unsigned int tags;
-	int isfloating, isurgent, isfullscreen;
+	int isfloating, isurgent, isfullscreen, isterm, noswallow;
 	uint32_t resize; /* configure serial of a pending resize */
 	double alpha;
 	double prevalpha;
@@ -133,7 +134,9 @@ typedef struct {
 	int prevy;
 	int prevwidth;
 	int prevheight;
-} Client;
+	pid_t pid;
+	Client *swallowing, *swallowedby;
+};
 
 typedef struct {
 	uint32_t mod;
@@ -227,6 +230,7 @@ typedef struct {
 	int isfloating;
 	double alpha;
 	int monitor;
+	int isterm, noswallow;
 } Rule;
 
 typedef struct {
@@ -369,6 +373,10 @@ static Monitor *xytomon(double x, double y);
 static struct wlr_scene_node *xytonode(double x, double y, struct wlr_surface **psurface,
 				       Client **pc, LayerSurface **pl, double *nx, double *ny);
 static void zoom(const Arg *arg);
+static pid_t getparentprocess(pid_t p);
+static int isdescprocess(pid_t p, pid_t c);
+static Client *termforwin(Client *w);
+static void swallow(Client *c, Client *w);
 static void setgaps(int oh, int ov, int ih, int iv);
 static void incrgaps(const Arg *arg);
 static void incrigaps(const Arg *arg);
@@ -492,6 +500,7 @@ static Atom netatom[NetLast];
 #include "dscm-utils.h"
 #include "dscm-config.h"
 #include "dscm-bindings.h"
+#include "patch-swallow.h"
 
 /* function implementations */
 void
@@ -542,6 +551,8 @@ applyrules(Client *c)
 		if ((!r.title || strstr(title, r.title))
 		    && (!r.id || strstr(appid, r.id))) {
 			c->isfloating = r.isfloating;
+			c->isterm = r.isterm;
+			c->noswallow = r.noswallow;
 			c->alpha = r.alpha;
 			newtags |= r.tags;
 			j = 0;
@@ -1116,6 +1127,7 @@ createnotify(struct wl_listener *listener, void *data)
 	c->surface.xdg = xdg_surface;
 	c->bw = borderpx;
 	c->alpha = default_alpha;
+	wl_client_get_credentials(c->surface.xdg->client->client, &c->pid, NULL, NULL);
 
 	LISTEN(&xdg_surface->events.map, &c->map, mapnotify);
 	LISTEN(&xdg_surface->events.unmap, &c->unmap, unmapnotify);
@@ -1465,6 +1477,62 @@ fullscreennotify(struct wl_listener *listener, void *data)
 	setfullscreen(c, client_wants_fullscreen(c));
 }
 
+pid_t
+getparentprocess(pid_t p)
+{
+	unsigned int v = 0;
+
+	FILE *f;
+	char buf[256];
+	snprintf(buf, sizeof(buf) - 1, "/proc/%u/stat", (unsigned)p);
+
+	if (!(f = fopen(buf, "r")))
+		return 0;
+
+	fscanf(f, "%*u %*s %*c %u", &v);
+	fclose(f);
+
+	return (pid_t)v;
+}
+
+int
+isdescprocess(pid_t p, pid_t c)
+{
+	while (p != c && c != 0)
+		c = getparentprocess(c);
+
+	return (int)c;
+}
+
+Client *
+termforwin(Client *w)
+{
+	Client *c;
+
+	if (!w->pid || w->isterm || w->noswallow)
+		return NULL;
+
+	wl_list_for_each(c, &clients, link)
+		if (c->isterm && !c->swallowing && c->pid && isdescprocess(c->pid, w->pid))
+			return c;
+
+	return NULL;
+}
+
+void
+swallow(Client *c, Client *w) {
+		c->bw = w->bw;
+		c->isfloating = w->isfloating;
+		c->isurgent = w->isurgent;
+		c->isfullscreen = w->isfullscreen;
+		c->alpha = w->alpha;
+		resize(c, w->geom, 0, w->bw);
+		wl_list_insert(&w->link, &c->link);
+		wl_list_insert(&w->flink, &c->flink);
+		wlr_scene_node_set_enabled(&w->scene->node, 0);
+		wlr_scene_node_set_enabled(&c->scene->node, 1);
+}
+
 void
 incnmaster(const Arg *arg)
 {
@@ -1679,6 +1747,20 @@ mapnotify(struct wl_listener *listener, void *data)
 	}
 	printstatus();
 
+	if (!c->noswallow) {
+			Client *p = termforwin(c);
+			if (p) {
+					c->swallowedby = p;
+					p->swallowing  = c;
+					wl_list_remove(&c->link);
+					wl_list_remove(&c->flink);
+					swallow(c,p);
+					wl_list_remove(&p->link);
+					wl_list_remove(&p->flink);
+			}
+			arrange(c->mon);
+	}
+
 unset_fullscreen:
 	m = c->mon ? c->mon : xytomon(c->geom.x, c->geom.y);
 	wl_list_for_each(w, &clients, link)
@@ -2721,6 +2803,17 @@ unmapnotify(struct wl_listener *listener, void *data)
 		grabc = NULL;
 	}
 
+	if (c->swallowing) {
+			c->swallowing->swallowedby = NULL;
+			c->swallowing = NULL;
+	}
+
+	if (c->swallowedby) {
+			swallow(c->swallowedby, c);
+			c->swallowedby->swallowing = NULL;
+			c->swallowedby = NULL;
+	}
+
 	if (client_is_unmanaged(c)) {
 		if (c == exclusive_focus)
 			exclusive_focus = NULL;
@@ -3320,6 +3413,7 @@ main(int argc, char *argv[])
 	scm_init_guile();
 	dscm_register();
 	dscm_config_parse();
+	patch_swallow_config_parse();
 	setup();
 	writepid(runtimedir);
 	run(startup_cmd);
diff --git a/patch-swallow.h b/patch-swallow.h
new file mode 100644
index 0000000..21cf350
--- /dev/null
+++ b/patch-swallow.h
@@ -0,0 +1,13 @@
+static inline void
+patch_swallow_modify_rule(unsigned int index, SCM rule, void *data)
+{
+	((Rule*)data)[index].isterm = dscm_alist_get_int(rule, "terminal");
+	((Rule*)data)[index].noswallow = dscm_alist_get_int(rule, "no-swallow");
+}
+
+static inline void
+patch_swallow_config_parse()
+{
+	dscm_modify_list(dscm_alist_get(config, "rules"), rules,
+		&patch_swallow_modify_rule);
+}
