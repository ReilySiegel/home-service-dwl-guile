diff --git a/doc/dwl-guile.1.man b/doc/dwl-guile.1.man
index 38947fc..62dbfcc 100644
--- a/doc/dwl-guile.1.man
+++ b/doc/dwl-guile.1.man
@@ -164,6 +164,23 @@ Here, the chosen client \fBemacs\fP is identified by its \fBid\fP and is set to
 .PP
 A rule can additionally match a window title with the help of \fBtitle\fP.
 
+.PP
+\fBSwallowing\fP of clients need to explicitly enabled by setting \fBterminal?\fP to \fB#t\fP for your terminal of choice:
+
+.PP
+.B
+.RS
+.nf
+\fC(set-rules '((id . "foot")
+.B
+             (terminal? . #t)))
+\fP
+.fi
+.RE
+
+.PP
+It is also possible to disable swallowing for specific clients by setting \fBno-swallow?\fP to \fB#t\fP.
+
 .SS "Colors"
 .PP
 Colors can be specified in RGBA format or hex format, i.e. \fB'(1.0 1.0 1.0 1.0)\fP or \fB"#001122FF"\fP (or just \fB"#FFFFFF"\fP if alpha is not needed).
diff --git a/doc/dwl-guile.1.org b/doc/dwl-guile.1.org
index 781f2db..c8563da 100644
--- a/doc/dwl-guile.1.org
+++ b/doc/dwl-guile.1.org
@@ -123,6 +123,17 @@ Here, the chosen client *emacs* is identified by its *id* and is set to spawn on
 
 A rule can additionally match a window title with the help of *title*.
 
+*Swallowing* of clients need to explicitly enabled by setting *terminal?* to *#t* for your terminal of choice:
+
+.B
+#+begin_src scheme
+(set-rules '((id . "foot")
+.B
+             (terminal? . #t)))
+#+end_src
+
+It is also possible to disable swallowing for specific clients by setting *no-swallow?* to *#t*.
+
 ** Colors
 Colors can be specified in RGBA format or hex format, i.e. *'(1.0 1.0 1.0 1.0)* or *"#001122FF"* (or just *"#FFFFFF"* if alpha is not needed).
 
diff --git a/dscm/config.h b/dscm/config.h
index fedc40c..8e66020 100644
--- a/dscm/config.h
+++ b/dscm/config.h
@@ -313,6 +313,8 @@ setter_rule(void *cvar, SCM value)
 	SCM floating = dscm_assoc_ref(value, "floating?");
 	SCM monitor = dscm_assoc_ref(value, "monitor");
 	SCM alpha = dscm_assoc_ref(value, "alpha");
+	SCM terminal = dscm_assoc_ref(value, "terminal?");
+	SCM noswallow = dscm_assoc_ref(value, "no-swallow?");
 
 	wl_list_for_each(r, lst, link) {
 		if (((!r->id && !id) || (r->id && id && !strcmp(r->id, id))) &&
@@ -339,7 +341,13 @@ setter_rule(void *cvar, SCM value)
 
 	DSCM_ASSERT_TYPE(scm_is_bool(floating),
 			 value, "set-rules", "floating?", "bool");
+	DSCM_ASSERT_TYPE(scm_is_bool(terminal),
+			 value, "set-rules", "terminal?", "bool");
+	DSCM_ASSERT_TYPE(scm_is_bool(noswallow),
+			 value, "set-rules", "no-swallow?", "bool");
 	r->isfloating = scm_to_bool(floating);
+	r->isterm = scm_to_bool(terminal);
+	r->noswallow = scm_to_bool(noswallow);
 
 	if (!scm_is_false(tags)) {
 		if (scm_is_true(scm_list_p(tags))) {
diff --git a/dwl.c b/dwl.c
index 8c624d4..d80a491 100644
--- a/dwl.c
+++ b/dwl.c
@@ -92,7 +92,8 @@ typedef union {
 } Arg;
 
 typedef struct Monitor Monitor;
-typedef struct {
+typedef struct Client Client;
+struct Client {
 	/* Must keep these three elements in this order */
 	unsigned int type; /* XDGShell or X11* */
 	struct wlr_box geom;  /* layout-relative, includes border */
@@ -121,7 +122,7 @@ typedef struct {
 #endif
 	unsigned int bw;
 	unsigned int tags;
-	int isfloating, isurgent, isfullscreen;
+	int isfloating, isurgent, isfullscreen, isterm, noswallow;
 	uint32_t resize; /* configure serial of a pending resize */
 	double alpha;
 	double prevalpha;
@@ -129,7 +130,9 @@ typedef struct {
 	int prevy;
 	int prevwidth;
 	int prevheight;
-} Client;
+	pid_t pid;
+	Client *swallowing, *swallowedby;
+};
 
 typedef struct {
 	unsigned int mod;
@@ -238,6 +241,7 @@ typedef struct {
 	int isfloating;
 	double alpha;
 	int monitor;
+	int isterm, noswallow;
 	struct wl_list link;
 } Rule;
 
@@ -383,6 +387,10 @@ static Monitor *xytomon(double x, double y);
 static struct wlr_scene_node *xytonode(double x, double y, struct wlr_surface **psurface,
 				       Client **pc, LayerSurface **pl, double *nx, double *ny);
 static void zoom(const Arg *arg);
+static pid_t getparentprocess(pid_t p);
+static int isdescprocess(pid_t p, pid_t c);
+static Client *termforwin(Client *w);
+static void swallow(Client *c, Client *w);
 static void setgaps(int oh, int ov, int ih, int iv);
 static void incrgaps(const Arg *arg);
 static void incrigaps(const Arg *arg);
@@ -574,6 +582,8 @@ applyrules(Client *c)
 		if ((!r->title || strstr(title, r->title))
 		    && (!r->id || strstr(appid, r->id))) {
 			c->isfloating = r->isfloating;
+			c->isterm = r->isterm;
+			c->noswallow = r->noswallow;
 			c->alpha = r->alpha;
 			newtags |= r->tags;
 			j = 0;
@@ -1134,6 +1144,7 @@ createnotify(struct wl_listener *listener, void *data)
 	c->surface.xdg = xdg_surface;
 	c->bw = borderpx;
 	c->alpha = default_alpha;
+	wl_client_get_credentials(c->surface.xdg->client->client, &c->pid, NULL, NULL);
 
 	LISTEN(&xdg_surface->events.map, &c->map, mapnotify);
 	LISTEN(&xdg_surface->events.unmap, &c->unmap, unmapnotify);
@@ -1506,6 +1517,62 @@ fullscreennotify(struct wl_listener *listener, void *data)
 	setfullscreen(c, client_wants_fullscreen(c));
 }
 
+pid_t
+getparentprocess(pid_t p)
+{
+	unsigned int v = 0;
+
+	FILE *f;
+	char buf[256];
+	snprintf(buf, sizeof(buf) - 1, "/proc/%u/stat", (unsigned)p);
+
+	if (!(f = fopen(buf, "r")))
+		return 0;
+
+	fscanf(f, "%*u %*s %*c %u", &v);
+	fclose(f);
+
+	return (pid_t)v;
+}
+
+int
+isdescprocess(pid_t p, pid_t c)
+{
+	while (p != c && c != 0)
+		c = getparentprocess(c);
+
+	return (int)c;
+}
+
+Client *
+termforwin(Client *w)
+{
+	Client *c;
+
+	if (!w->pid || w->isterm || w->noswallow)
+		return NULL;
+
+	wl_list_for_each(c, &clients, link)
+		if (c->isterm && !c->swallowing && c->pid && isdescprocess(c->pid, w->pid))
+			return c;
+
+	return NULL;
+}
+
+void
+swallow(Client *c, Client *w) {
+		c->bw = w->bw;
+		c->isfloating = w->isfloating;
+		c->isurgent = w->isurgent;
+		c->isfullscreen = w->isfullscreen;
+		c->alpha = w->alpha;
+		resize(c, w->geom, 0, w->bw);
+		wl_list_insert(&w->link, &c->link);
+		wl_list_insert(&w->flink, &c->flink);
+		wlr_scene_node_set_enabled(&w->scene->node, 0);
+		wlr_scene_node_set_enabled(&c->scene->node, 1);
+}
+
 void
 incnmaster(const Arg *arg)
 {
@@ -1726,6 +1793,20 @@ mapnotify(struct wl_listener *listener, void *data)
 	}
 	printstatus();
 
+	if (!c->noswallow) {
+			Client *p = termforwin(c);
+			if (p) {
+					c->swallowedby = p;
+					p->swallowing  = c;
+					wl_list_remove(&c->link);
+					wl_list_remove(&c->flink);
+					swallow(c,p);
+					wl_list_remove(&p->link);
+					wl_list_remove(&p->flink);
+			}
+			arrange(c->mon);
+	}
+
 unset_fullscreen:
 	m = c->mon ? c->mon : xytomon(c->geom.x, c->geom.y);
 	wl_list_for_each(w, &clients, link)
@@ -2708,6 +2789,17 @@ unmapnotify(struct wl_listener *listener, void *data)
 		grabc = NULL;
 	}
 
+	if (c->swallowing) {
+			c->swallowing->swallowedby = NULL;
+			c->swallowing = NULL;
+	}
+
+	if (c->swallowedby) {
+			swallow(c->swallowedby, c);
+			c->swallowedby->swallowing = NULL;
+			c->swallowedby = NULL;
+	}
+
 	if (client_is_unmanaged(c)) {
 		if (c == exclusive_focus)
 			exclusive_focus = NULL;
