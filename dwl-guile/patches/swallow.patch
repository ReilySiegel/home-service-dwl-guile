diff --git a/dwl.c b/dwl.c
index 2e56ed2..d6758f2 100644
--- a/dwl.c
+++ b/dwl.c
@@ -91,7 +91,8 @@ typedef struct {
 } Button;
 
 typedef struct Monitor Monitor;
-typedef struct {
+typedef struct Client Client;
+struct Client {
         struct wl_list link;
         struct wl_list flink;
         struct wl_list slink;
@@ -124,7 +125,12 @@ typedef struct {
         int prevwidth;
         int prevheight;
         int isfullscreen;
-} Client;
+        int isterminal, noswallow;
+        pid_t pid;
+        Client *swallowing;
+        Client *swallowedby;
+        double swallowingalpha;
+};
 
 typedef struct {
         struct wl_list link;
@@ -235,6 +241,7 @@ typedef struct {
         unsigned int tags;
         int isfloating;
         double alpha;
+        int isterminal, noswallow;
         int monitor;
 } Rule;
 
@@ -274,7 +281,7 @@ static void applyexclusive(struct wlr_box *usable_area, uint32_t anchor,
                            int32_t exclusive, int32_t margin_top,
                            int32_t margin_right, int32_t margin_bottom,
                            int32_t margin_left);
-static void applyrules(Client *c);
+static void applyrules(Client *c, int dosetmon);
 static void arrange(Monitor *m);
 static void arrangelayer(Monitor *m, struct wl_list *list,
                          struct wlr_box *usable_area, int exclusive);
@@ -394,6 +401,10 @@ static void defaultgaps(const Arg *arg);
 /* signal actions */
 static int reloadconfig(int signal, void *data);
 
+static pid_t getparentprocess(pid_t p);
+static int isdescprocess(pid_t p, pid_t c);
+static Client *termforwin(const Client *c);
+
 /* variables */
 static const char broken[] = "broken";
 static struct wl_display *dpy;
@@ -493,6 +504,7 @@ static Atom netatom[NetLast];
 #include "dscm-utils.h"
 #include "dscm-config.h"
 #include "dscm-bindings.h"
+#include "patch-swallow.h"
 
 /* function implementations */
 void
@@ -572,7 +584,30 @@ applyexclusive(struct wlr_box *usable_area,
 }
 
 void
-applyrules(Client *c)
+applyswallowrules(Client *c)
+{
+
+        Rule r;
+        const char *appid, *title;
+
+        if (!(appid = client_get_appid(c)))
+                appid = broken;
+        if (!(title = client_get_title(c)))
+                title = broken;
+
+        for (int i = 0; i < numrules; i++) {
+                r = rules[i];
+                if ((!r.title || strstr(title, r.title))
+                                && (!r.id || strstr(appid, r.id))) {
+                        c->isterminal = r.isterminal;
+                        c->noswallow = r.noswallow;
+                        c->alpha = r.alpha;
+                }
+        }
+}
+
+void
+applyrules(Client *c, int dosetmon)
 {
         /* rule matching */
         const char *appid, *title;
@@ -592,6 +627,8 @@ applyrules(Client *c)
                     && (!r.id || strstr(appid, r.id))) {
                         c->isfloating = r.isfloating;
                         c->alpha = r.alpha;
+                        c->isterminal = r.isterminal;
+                        c->noswallow = r.noswallow;
                         newtags |= r.tags;
                         j = 0;
                         wl_list_for_each(m, &mons, link)
@@ -600,7 +637,8 @@ applyrules(Client *c)
                 }
         }
         wl_list_insert(c->isfloating ? &stack : stack.prev, &c->slink);
-        setmon(c, mon, newtags);
+        if (dosetmon)
+                setmon(c, mon, newtags);
 }
 
 void
@@ -1063,7 +1101,8 @@ createnotify(struct wl_listener *listener, void *data)
         /* This event is raised when wlr_xdg_shell receives a new xdg surface from a
          * client, either a toplevel (application window) or popup. */
         struct wlr_xdg_surface *xdg_surface = data;
-        Client *c;
+        Client *c, *term;
+        void *tmpptr;
 
         if (xdg_surface->role != WLR_XDG_SURFACE_ROLE_TOPLEVEL) {
                 c = selclient();
@@ -1085,16 +1124,56 @@ createnotify(struct wl_listener *listener, void *data)
         c->surface.xdg = xdg_surface;
         c->bw = borderpx;
         c->alpha = default_alpha;
-
-        /* LISTEN(&xdg_surface->surface->events.commit, &c->commit, commitnotify); */
-        LISTEN(&xdg_surface->surface->events.new_subsurface, &c->new_sub, new_subnotify);
-        LISTEN(&xdg_surface->events.map, &c->map, mapnotify);
-        LISTEN(&xdg_surface->events.unmap, &c->unmap, unmapnotify);
-        LISTEN(&xdg_surface->events.destroy, &c->destroy, destroynotify);
-        LISTEN(&xdg_surface->toplevel->events.set_title, &c->set_title, updatetitle);
-        LISTEN(&xdg_surface->toplevel->events.request_fullscreen, &c->fullscreen,
-               fullscreennotify);
         c->isfullscreen = 0;
+
+        wl_client_get_credentials(c->surface.xdg->client->client, &c->pid, NULL, NULL);
+        applyswallowrules(c);
+        term = termforwin(c);
+
+        if (term) {
+                term->swallowing = c;
+                term->swallowingalpha = term->alpha;
+                term->alpha = c->alpha;
+                c->swallowedby = term;
+                c->mon = term->mon;
+
+                tmpptr = term->surface.xdg;
+                term->surface = c->surface;
+                c->surface.xdg = tmpptr;
+
+                wl_list_remove(&term->commit.link);
+                wl_list_remove(&term->unmap.link);
+                wl_list_remove(&term->destroy.link);
+
+                wl_signal_add(&xdg_surface->surface->events.commit, &term->commit);
+                wl_signal_add(&xdg_surface->events.unmap, &term->unmap);
+                wl_signal_add(&xdg_surface->events.destroy, &term->destroy);
+                wl_signal_add(&c->surface.xdg->events.destroy, &c->destroy);
+
+                term->geom.width += 2 * c->bw;
+                term->geom.height += 2 * c->bw;
+
+                /* Tell the client not to try anything fancy.
+                 * This is normally called in mapnotify, but swallowed clients will
+                 * not trigger the map event, since the underlying client already exists. */
+                client_set_tiled(term, WLR_EDGE_TOP | WLR_EDGE_BOTTOM | WLR_EDGE_LEFT | WLR_EDGE_RIGHT);
+
+                resize(term, term->geom.x, term->geom.y, term->geom.width, term->geom.height, 0, term->bw);
+                arrange(term->mon);
+                /* Focus swallowed client only if the swallowing client
+                 * was previously focused. */
+                if (selclient() == term)
+                        focusclient(term, 0);
+        } else {
+                LISTEN(&xdg_surface->surface->events.commit, &c->commit, commitnotify);
+                LISTEN(&xdg_surface->events.map, &c->map, mapnotify);
+                LISTEN(&xdg_surface->surface->events.new_subsurface, &c->new_sub, new_subnotify);
+                LISTEN(&xdg_surface->events.unmap, &c->unmap, unmapnotify);
+                LISTEN(&xdg_surface->events.destroy, &c->destroy, destroynotify);
+                LISTEN(&xdg_surface->toplevel->events.set_title, &c->set_title, updatetitle);
+                LISTEN(&xdg_surface->toplevel->events.request_fullscreen, &c->fullscreen,
+                                fullscreennotify);
+        }
 }
 
 void
@@ -1223,15 +1302,27 @@ void
 destroynotify(struct wl_listener *listener, void *data)
 {
         /* Called when the surface is destroyed and should never be shown again. */
+        struct wlr_keyboard *kb;
         Client *c = wl_container_of(listener, c, destroy);
 
         // Damage the whole screen
         if (c->mon)
                 wlr_output_damage_add_whole(c->mon->damage);
 
-        wl_list_remove(&c->map.link);
+        if (c->swallowedby) {
+                c->swallowedby->alpha = c->swallowedby->swallowingalpha;
+                c->swallowedby->swallowing = NULL;
+                wl_list_remove(&c->destroy.link);
+                free(c);
+                return;
+        }
+
+        if (!c->swallowing)
+                wl_list_remove(&c->map.link);
+
         wl_list_remove(&c->unmap.link);
         wl_list_remove(&c->destroy.link);
+
         if (client_is_unmanaged(c)) {
 #ifdef XWAYLAND
                 wl_list_remove(&c->configure.link);
@@ -1244,9 +1335,30 @@ destroynotify(struct wl_listener *listener, void *data)
         } else {
                 wl_list_remove(&c->commit.link);
         }
-        wl_list_remove(&c->set_title.link);
-        wl_list_remove(&c->fullscreen.link);
-        free(c);
+
+        if (c->swallowing) {
+                wl_list_remove(&c->swallowing->destroy.link);
+                c->surface.xdg = c->swallowing->surface.xdg;
+                free(c->swallowing);
+                c->alpha = c->swallowingalpha;
+                c->swallowing = NULL;
+
+                resize(c, c->geom.x, c->geom.y, c->geom.width, c->geom.height, 0, c->bw);
+                wl_signal_add(&c->surface.xdg->surface->events.commit, &c->commit);
+                wl_signal_add(&c->surface.xdg->surface->events.destroy, &c->destroy);
+                wl_signal_add(&c->surface.xdg->events.unmap, &c->unmap);
+                /* Update keyboard focus after swapping the client surfaces */
+                kb = wlr_seat_get_keyboard(seat);
+                wlr_seat_keyboard_notify_enter(seat, client_surface(c),
+                                kb->keycodes, kb->num_keycodes, &kb->modifiers);
+                /* Make sure that the title of the selected window is updated
+                 * to the title of the swallowing client. */
+                printstatus();
+        } else {
+                wl_list_remove(&c->set_title.link);
+                wl_list_remove(&c->fullscreen.link);
+                free(c);
+        }
 }
 
 void
@@ -1282,8 +1394,8 @@ setfullscreen(Client *c, int fullscreen)
                 c->prevwidth = c->geom.width;
                 c->prevalpha = c->alpha;
                 c->alpha = 1;
-                resize(c, c->mon->m.x, c->mon->m.y, c->mon->m.width, c->mon->m.height, 0,
-                       !smartborders);
+                resize(c, c->mon->m.x, c->mon->m.y, c->mon->m.width, c->mon->m.height,
+                       0, 0);
                 wl_list_remove(&c->slink);
                 wl_list_insert(&stack, &c->slink);
                 motionnotify(0);
@@ -1571,7 +1683,7 @@ mapnotify(struct wl_listener *listener, void *data)
                          WLR_EDGE_TOP | WLR_EDGE_BOTTOM | WLR_EDGE_LEFT | WLR_EDGE_RIGHT);
 
         /* Set initial monitor, tags, floating status, and focus */
-        applyrules(c);
+        applyrules(c, 1);
         printstatus();
 
         if (c->isfullscreen)
@@ -2257,6 +2369,8 @@ setfloating(Client *c, int floating)
                 wl_list_insert(floating ? &stack : stack.prev, &c->slink);
         }
         c->isfloating = floating;
+        if (c->isfloating && !c->bw)
+                resize(c, c->geom.x, c->geom.y, c->geom.width, c->geom.height, 0, 1);
         arrange(c->mon);
 }
 
@@ -2422,6 +2536,7 @@ setmon(Client *c, Monitor *m, unsigned int newtags)
                 c->tags = newtags ? newtags : m->tagset[m->seltags]; /* assign tags of target monitor */
                 arrange(m);
         }
+
         focusclient(focustop(selmon), 1);
 }
 
@@ -2821,6 +2936,9 @@ unmapnotify(struct wl_listener *listener, void *data)
         /* Called when the surface is unmapped, and should no longer be shown. */
         Client *c = wl_container_of(listener, c, unmap);
 
+        if (c->swallowing)
+                return;
+
         // Damage the whole screen
         if (c->mon)
                 wlr_output_damage_add_whole(c->mon->damage);
@@ -2951,6 +3069,48 @@ writepid(const char *runtimedir)
         fclose(pidfile);
 }
 
+pid_t
+getparentprocess(pid_t p)
+{
+        unsigned int v = 0;
+
+        FILE *f;
+        char buf[256];
+        snprintf(buf, sizeof(buf) - 1, "/proc/%u/stat", (unsigned)p);
+
+        if (!(f = fopen(buf, "r")))
+                return 0;
+
+        fscanf(f, "%*u %*s %*c %u", &v);
+        fclose(f);
+
+        return (pid_t)v;
+}
+
+int
+isdescprocess(pid_t p, pid_t c)
+{
+        while (p != c && c != 0)
+                c = getparentprocess(c);
+
+        return (int)c;
+}
+
+Client *
+termforwin(const Client *w)
+{
+        Client *c;
+
+        if (!w->pid || w->isterminal || w->noswallow)
+                return NULL;
+
+        wl_list_for_each(c, &stack, slink)
+                if (c->isterminal && !c->swallowing && c->pid && isdescprocess(c->pid, w->pid))
+                        return c;
+
+        return NULL;
+}
+
 Client *
 xytoclient(double x, double y)
 {
@@ -3450,6 +3610,7 @@ main(int argc, char *argv[])
         scm_init_guile();
         dscm_register();
         dscm_config_parse(config_file);
+        patch_swallow_config_parse();
         setup(config_file);
         writepid(runtimedir);
         run(startup_cmd);
diff --git a/patch-swallow.h b/patch-swallow.h
new file mode 100644
index 0000000..21e943a
--- /dev/null
+++ b/patch-swallow.h
@@ -0,0 +1,13 @@
+static inline void
+patch_swallow_modify_rule(unsigned int index, SCM rule, void *data)
+{
+        ((Rule*)data)[index].isterminal = dscm_alist_get_int(rule, "terminal");
+        ((Rule*)data)[index].noswallow = dscm_alist_get_int(rule, "no-swallow");
+}
+
+static inline void
+patch_swallow_config_parse()
+{
+        dscm_modify_list(dscm_alist_get(config, "rules"), rules,
+                &patch_swallow_modify_rule);
+}
